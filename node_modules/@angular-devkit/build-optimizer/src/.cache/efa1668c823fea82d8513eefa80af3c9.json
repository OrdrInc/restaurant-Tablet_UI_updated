{"remainingRequest":"C:\\Users\\Public\\restaurant-Tablet_UI_updated\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--8-1!C:\\Users\\Public\\restaurant-Tablet_UI_updated\\node_modules\\ngx-loading\\fesm5\\ngx-loading.js","dependencies":[{"path":"C:\\Users\\Public\\restaurant-Tablet_UI_updated\\node_modules\\ngx-loading\\fesm5\\ngx-loading.js","mtime":1609273593525},{"path":"C:\\Users\\Public\\restaurant-Tablet_UI_updated\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1609273575432},{"path":"C:\\Users\\Public\\restaurant-Tablet_UI_updated\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1609273553988}],"contextDependencies":[],"result":["/** PURE_IMPORTS_START _angular_core,_angular_common PURE_IMPORTS_END */\nimport { Inject, Injectable, Optional, ChangeDetectorRef, Component, Input, defineInjectable, inject, NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\nvar NgxLoadingConfig = /** @class */ /*@__PURE__*/ (function () {\n    function NgxLoadingConfig(config) {\n        if (config === void 0) {\n            config = {};\n        }\n        this.backdropBorderRadius = config.backdropBorderRadius;\n        this.backdropBackgroundColour = config.backdropBackgroundColour;\n        this.fullScreenBackdrop = config.fullScreenBackdrop;\n        this.animationType = config.animationType;\n        this.primaryColour = config.primaryColour;\n        this.secondaryColour = config.secondaryColour;\n        this.tertiaryColour = config.tertiaryColour;\n    }\n    return NgxLoadingConfig;\n}());\n/** @type {?} */\nvar ngxLoadingAnimationTypes = {\n    chasingDots: 'chasing-dots',\n    circle: 'sk-circle',\n    circleSwish: 'circleSwish',\n    cubeGrid: 'sk-cube-grid',\n    doubleBounce: 'double-bounce',\n    none: 'none',\n    pulse: 'pulse',\n    rectangleBounce: 'rectangle-bounce',\n    rotatingPlane: 'rotating-plane',\n    threeBounce: 'three-bounce',\n    wanderingCubes: 'wandering-cubes'\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\nvar NgxLoadingService = /** @class */ /*@__PURE__*/ (function () {\n    function NgxLoadingService(config) {\n        this.config = config;\n        this.loadingConfig = this.config || new NgxLoadingConfig();\n    }\n    /** @nocollapse */ NgxLoadingService.ngInjectableDef = defineInjectable({ factory: function NgxLoadingService_Factory() { return new NgxLoadingService(inject(\"loadingConfig\", 8)); }, token: NgxLoadingService, providedIn: \"root\" });\n    return NgxLoadingService;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\nvar NgxLoadingComponent = /** @class */ /*@__PURE__*/ (function () {\n    function NgxLoadingComponent(LoadingService, changeDetectorRef) {\n        this.LoadingService = LoadingService;\n        this.changeDetectorRef = changeDetectorRef;\n        this.config = new NgxLoadingConfig();\n        this.defaultConfig = {\n            animationType: ngxLoadingAnimationTypes.threeBounce,\n            backdropBackgroundColour: 'rgba(0, 0, 0, 0.3)',\n            backdropBorderRadius: '0px',\n            fullScreenBackdrop: false,\n            primaryColour: '#ffffff',\n            secondaryColour: '#ffffff',\n            tertiaryColour: '#ffffff'\n        };\n        this.ngxLoadingAnimationTypes = ngxLoadingAnimationTypes;\n    }\n    /**\n     * @return {?}\n     */\n    NgxLoadingComponent.prototype.ngOnInit = /**\n     * @return {?}\n     */\n        function () {\n            this.setupConfig();\n        };\n    /**\n     * @return {?}\n     */\n    NgxLoadingComponent.prototype.setupConfig = /**\n     * @return {?}\n     */\n        function () {\n            for (var option in this.defaultConfig) {\n                if (typeof this.config[option] === 'boolean') {\n                    if (this.config[option] != null) {\n                        continue;\n                    }\n                    this.config[option] = this.LoadingService.loadingConfig[option] != null ? this.LoadingService.loadingConfig[option] : this.defaultConfig[option];\n                }\n                else {\n                    if (this.config[option] != null) {\n                        continue;\n                    }\n                    this.config[option] = this.LoadingService.loadingConfig[option] != null ? this.LoadingService.loadingConfig[option] : this.defaultConfig[option];\n                }\n            }\n        };\n    /**\n     * @param {?} show\n     * @return {?}\n     */\n    NgxLoadingComponent.prototype.setShow = /**\n     * @param {?} show\n     * @return {?}\n     */\n        function (show) {\n            this.show = show;\n            this.changeDetectorRef.markForCheck();\n        };\n    return NgxLoadingComponent;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\nvar NgxLoadingModule = /** @class */ /*@__PURE__*/ (function () {\n    function NgxLoadingModule() {\n    }\n    /**\n     * @param {?} loadingConfig\n     * @return {?}\n     */\n    NgxLoadingModule.forRoot = /**\n     * @param {?} loadingConfig\n     * @return {?}\n     */\n        function (loadingConfig) {\n            return {\n                ngModule: NgxLoadingModule,\n                providers: [{ provide: 'loadingConfig', useValue: loadingConfig }]\n            };\n        };\n    return NgxLoadingModule;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc\n */\nexport { NgxLoadingService, NgxLoadingComponent, NgxLoadingModule, NgxLoadingConfig, ngxLoadingAnimationTypes };\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n",null]}