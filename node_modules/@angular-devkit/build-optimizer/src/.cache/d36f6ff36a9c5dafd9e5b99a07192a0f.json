{"remainingRequest":"/Users/prithvi/Desktop/restaurant-Tablet_UI_updated/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--8-1!/Users/prithvi/Desktop/restaurant-Tablet_UI_updated/node_modules/rxjs-compat/_esm5/operator/skipWhile.js","dependencies":[{"path":"/Users/prithvi/Desktop/restaurant-Tablet_UI_updated/node_modules/rxjs-compat/_esm5/operator/skipWhile.js","mtime":1562777415224},{"path":"/Users/prithvi/Desktop/restaurant-Tablet_UI_updated/node_modules/cache-loader/dist/cjs.js","mtime":1562777410053},{"path":"/Users/prithvi/Desktop/restaurant-Tablet_UI_updated/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1562777406807}],"contextDependencies":[],"result":["import { skipWhile as higherOrder } from 'rxjs/operators';\n/**\n * Returns an Observable that skips all items emitted by the source Observable as long as a specified condition holds\n * true, but emits all further source items as soon as the condition becomes false.\n *\n * <img src=\"./img/skipWhile.png\" width=\"100%\">\n *\n * @param {Function} predicate - A function to test each item emitted from the source Observable.\n * @return {Observable<T>} An Observable that begins emitting items emitted by the source Observable when the\n * specified predicate becomes false.\n * @method skipWhile\n * @owner Observable\n */\nexport function skipWhile(predicate) {\n    return higherOrder(predicate)(this);\n}\n//# sourceMappingURL=skipWhile.js.map",null]}