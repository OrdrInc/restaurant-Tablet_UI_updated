{"remainingRequest":"/Users/prithvi/Downloads/pusher/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--8-1!/Users/prithvi/Downloads/pusher/node_modules/rxjs-compat/_esm5/operator/skipUntil.js","dependencies":[{"path":"/Users/prithvi/Downloads/pusher/node_modules/rxjs-compat/_esm5/operator/skipUntil.js","mtime":499162500000},{"path":"/Users/prithvi/Downloads/pusher/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/prithvi/Downloads/pusher/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1528256844000}],"contextDependencies":[],"result":["import { skipUntil as higherOrder } from 'rxjs/operators';\n/**\n * Returns an Observable that skips items emitted by the source Observable until a second Observable emits an item.\n *\n * <img src=\"./img/skipUntil.png\" width=\"100%\">\n *\n * @param {Observable} notifier - The second Observable that has to emit an item before the source Observable's elements begin to\n * be mirrored by the resulting Observable.\n * @return {Observable<T>} An Observable that skips items from the source Observable until the second Observable emits\n * an item, then emits the remaining items.\n * @method skipUntil\n * @owner Observable\n */\nexport function skipUntil(notifier) {\n    return higherOrder(notifier)(this);\n}\n//# sourceMappingURL=skipUntil.js.map",null]}