{"remainingRequest":"/Users/prithvi/Desktop/restaurant-Tablet_UI_updated/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--8-1!/Users/prithvi/Desktop/restaurant-Tablet_UI_updated/node_modules/rxjs-compat/_esm5/operator/startWith.js","dependencies":[{"path":"/Users/prithvi/Desktop/restaurant-Tablet_UI_updated/node_modules/rxjs-compat/_esm5/operator/startWith.js","mtime":1591897755358},{"path":"/Users/prithvi/Desktop/restaurant-Tablet_UI_updated/node_modules/cache-loader/dist/cjs.js","mtime":1591897751512},{"path":"/Users/prithvi/Desktop/restaurant-Tablet_UI_updated/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1591897748973}],"contextDependencies":[],"result":["import { startWith as higherOrder } from 'rxjs/operators';\n/* tslint:enable:max-line-length */\n/**\n * Returns an Observable that emits the items you specify as arguments before it begins to emit\n * items emitted by the source Observable.\n *\n * <img src=\"./img/startWith.png\" width=\"100%\">\n *\n * @param {...T} values - Items you want the modified Observable to emit first.\n * @param {Scheduler} [scheduler] - A {@link IScheduler} to use for scheduling\n * the emissions of the `next` notifications.\n * @return {Observable} An Observable that emits the items in the specified Iterable and then emits the items\n * emitted by the source Observable.\n * @method startWith\n * @owner Observable\n */\nexport function startWith() {\n    var array = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        array[_i] = arguments[_i];\n    }\n    return higherOrder.apply(void 0, array)(this);\n}\n//# sourceMappingURL=startWith.js.map",null]}