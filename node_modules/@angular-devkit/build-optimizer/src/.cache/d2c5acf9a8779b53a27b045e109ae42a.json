{"remainingRequest":"C:\\Users\\Public\\restaurant-Tablet_UI_updated\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--8-1!C:\\Users\\Public\\restaurant-Tablet_UI_updated\\node_modules\\rxjs-compat\\_esm5\\operator\\repeat.js","dependencies":[{"path":"C:\\Users\\Public\\restaurant-Tablet_UI_updated\\node_modules\\rxjs-compat\\_esm5\\operator\\repeat.js","mtime":1609273599669},{"path":"C:\\Users\\Public\\restaurant-Tablet_UI_updated\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1609273575432},{"path":"C:\\Users\\Public\\restaurant-Tablet_UI_updated\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1609273553988}],"contextDependencies":[],"result":["import { repeat as higherOrder } from 'rxjs/operators';\r\n/**\r\n * Returns an Observable that repeats the stream of items emitted by the source Observable at most count times.\r\n *\r\n * <img src=\"./img/repeat.png\" width=\"100%\">\r\n *\r\n * @param {number} [count] The number of times the source Observable items are repeated, a count of 0 will yield\r\n * an empty Observable.\r\n * @return {Observable} An Observable that repeats the stream of items emitted by the source Observable at most\r\n * count times.\r\n * @method repeat\r\n * @owner Observable\r\n */\r\nexport function repeat(count) {\r\n    if (count === void 0) { count = -1; }\r\n    return higherOrder(count)(this);\r\n}\r\n//# sourceMappingURL=repeat.js.map",null]}